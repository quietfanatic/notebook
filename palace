#!/usr/bin/perl
package palace;
use strict;
use warnings;
use v5.18;
use bytes;  # Assume everything is UTF-8
use JSON::MaybeXS ':all';
use Carp 'croak';

 # Overridden for testing
our $datadir = 'data';

##### Misc utilities
sub arity_miss {
    my ($got, $wanted) = @_;
    my (undef, undef, undef, $name) = caller 1;
    return $got > $wanted
        ? "Too many parameters passed to $name ($got > $wanted)"
        : "Too few parameters passed to $name ($got < $wanted)";
}

##### Validation

 # Ad-hoc, doesn't conform to any standardized schema schema.
our $top_schema = {
    name => 'name',
    uri => 'uri',
    added => 'datetime',
    updated => 'datetime',
    tags => ['name'],
    tagged => ['name'],
    comments => ['string'],
    misc => { '!ANY' => undef },
    '!REQUIRED' => ['name'],
};

 # Returns list of strings.
sub criticize {
    my ($obj, $schema, $path) = @_;
    @_ < 1 and croak arity_miss 0+@_, 1;
    @_ < 2 and $schema = $top_schema;
    @_ < 3 and $path = 'TOP' if @_ < 3;
    @_ > 3 and croak arity_miss 0+@_, 3;
    if (!defined $schema) {
        return ();  # Anything goes
    }
    elsif (ref $schema eq 'HASH') {
        ref $obj eq 'HASH' or return "Value at $path is not an object";
        my @errs;
        for (@{$schema->{'!REQUIRED'}}) {
            if (!exists $obj->{$_}) {
                push @errs, "Missing required property $_ at $path";
            }
        }
        for (keys %$obj) {
            if ($_ =~ /^!/) {
                push @errs, "Key $_ at $path should not begin with a !";
            }
            elsif (exists $schema->{$_}) {
                push @errs, criticize($obj->{$_}, $schema->{$_}, "$path.$_");
            }
            elsif (exists $schema->{'!ANY'}) {
                push @errs, criticize($obj->{$_}, $schema->{'!ANY'}, "$path.$_");
            }
            else {
                push @errs, "Unallowed property $_ at $path";
            }
        }
        return @errs;
    }
    elsif (ref $schema eq 'ARRAY') {
        ref $obj eq 'ARRAY' or return "Value at $path is not an array";
        @$schema == 1 or return "Schema itself is broken at $path";
        my @errs;
        for (0..$#$obj) {
            push @errs, criticize($obj->[$_], $schema->[0], "$path\[$_]");
        }
        return @errs;
    }
    elsif ($schema eq 'name') {
        ref $obj eq '' or return "Value at $path is not a string, let alone a name";
        my @errs;
        if (length $obj > 200) {
            push @errs, "Value at $path is too long to be a name";
        }
        if ($obj =~ /[\x00-\x1f\x7f]/) {
            push @errs, "Value at $path contains unprintable characters not allowed in a name";
        }
        return @errs;
    }
    elsif ($schema eq 'datetime') {
        ref $obj eq '' or return "Value at $path is not a string, let alone a date";
         # Only taking UTC dates
        $obj =~ /^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$/
            or return "Value at $path does not look like a date";
        return ();
    }
    elsif ($schema eq 'uri') {
        ref $obj eq '' or return "Value at $path is not a string, let along a uri";
        $obj =~ /^[a-z]+:\/\// or return "Value at $path does not look like a uri";
        return ();
    }
    elsif ($schema eq 'string') {
        ref $obj eq '' or return "Value at $path is not a string";
         # Not caring about numbers
        return ();
    }
    else {
        return "Schema itself is broken at $path";
    }
}
sub criticize_or_die {
    my ($obj, $mess) = @_;
    @_ == 2 or croak arity_miss 0+@_, 2;
    my @errs = criticize $obj;
    if (@errs) {
        die join("\n    ", $mess, @errs) . "\n";
    }
}

##### Stringy utilities

sub iso_datetime { ($_[5]+1900)."-".($_[4]+01)."-$_[3]T$_[2]:$_[1]:$_[0]Z" }

sub encode_name {
    my ($name) = @_;
    $name =~ s/([\/\\?%*:|"'<>.])/sprintf '%%%02X', ord($1)/eg;
    return $name;
}
sub decode_name {
    my ($name) = @_;
    $name =~ s/%([a-zA-Z0-9]{2})/chr hex $1/eg;
    return $name;
}
sub name_file {
    my $ename = encode_name $_[0];
    return "$datadir/things/$ename.json";
}


##### Backend

sub read_item {
    my ($name, $filename) = @_;
    @_ < 1 and croak arity_miss 0+@_, 1;
    @_ < 2 and $filename = name_file $name;
    @_ > 2 and croak arity_miss 0+@_, 2;
    -e $filename or croak "$name is not a registered item";
    open my $F, '<', $filename or croak "Could not open $filename for reading: $!";
    local $/;
    my $json = <$F> // croak "Could not read from $filename: $!";
    close $F or croak "Could not close $filename: $!";
    my $item = decode_json $json;
    criticize_or_die $item, "$filename contained invalid data!";
    return $item;
}

sub write_item {
    my ($item, $filename) = @_;
    @_ < 1 and croak arity_miss 0+@_, 1;
    @_ < 2 and $filename = name_file $item->{name};
    @_ > 2 and croak arity_miss 0+@_, 2;
    criticize_or_die $item, "Provided data did not pass validation.";
    my $json = encode_json $item;
    open my $F, '>', $filename or croak "Could not open $filename for writing: $!";
    print $F $json or croak "Could not write to $filename: $!";
    return 1;
}

sub have_item {
    my ($item, $filename) = @_;
    @_ < 1 and croak arity_miss 0+@_, 1;
    @_ < 2 and $filename = name_file $item->{name};
    @_ > 2 and croak arity_miss 0+@_, 2;
    return -e $filename;
}

##### Stringy/commandy API
sub add_raw {
    my ($text) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    my $item = decode_json $text;
    my $filename = name_file;
    have_item $item->{name}, $filename and croak "An item named $item->{name} is already registered";
    criticize_or_die $item, "Input to 'add' didn't pass validation.";
    $item->{created} //= iso_datetime(gmtime);
    $item->{updated} = iso_datetime(gmtime);
     # TODO: link tags
    write_data $item, $filename;
}
sub show_raw {
    my ($name) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    my $item = read_item $name;
     # TODO: prettyprint
    return encode_json $item;
}

1;
