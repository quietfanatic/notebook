#!/usr/bin/perl
package palace;
use strict;
use warnings;
use v5.18;
use bytes;  # Assume everything is UTF-8
use JSON::MaybeXS ':all';
use Carp 'croak';

 # Overridden for testing
our $datadir = 'data';

##### Misc utilities
sub arity_miss {
    my ($got, $wanted) = @_;
    my (undef, undef, undef, $name) = caller 1;
    return $got > $wanted
        ? "Too many parameters passed to $name ($got > $wanted)"
        : "Too few parameters passed to $name ($got < $wanted)";
}

sub slurp {
    my ($fn) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    local $/;
    open my $F, '<', $fn or die "Failed to open $fn for reading: $!\n";
    my $s = <$F> // die "Failed to read from $fn: $!\n";
    close $F or die "Failed to close $fn: $!\n";
    return $s;
}

sub splat {
    my ($fn, $str) = @_;
    @_ == 2 or croak arity_miss 0+@_, 1;
    open my $F, '>', $fn or die "Failed to open $fn for writing: $!\n";
    print $F $str or die "Failed to write to $fn: $!\n";
    close $F or die "Failed to close $fn: $!\n";
}

sub mkdirs {
    for (@_) {
        -d $_ or mkdir $_ or die "Failed to mkdir $_: $!\n";
    }
}

##### Stringy utilities

sub iso_datetime { ($_[5]+1900)."-".($_[4]+01)."-$_[3]T$_[2]:$_[1]:$_[0]Z" }

sub encode_name {
    my ($name) = @_;
    $name =~ s/([\/\\?%*:|"'<>.])/sprintf '%%%02X', ord($1)/eg;
    return $name;
}
sub decode_name {
    my ($name) = @_;
    $name =~ s/%([a-zA-Z0-9]{2})/chr hex $1/eg;
    return $name;
}
sub name_file {
    my $ename = encode_name $_[0];
    return "$datadir/things/$ename.json";
}
sub name_file_backup {
    my $ename = encode_name $_[0];
    return "$datadir/backup/$ename.json";
}


##### Validation

 # Ad-hoc, doesn't conform to any standardized schema schema.
our $top_schema = {
    name => 'name',
    uri => 'uri',
    added => 'datetime',
    updated => 'datetime',
    tags => ['name'],
    tagged => ['name'],
    comments => ['string'],
    misc => { '!ANY' => undef },
    '!REQUIRED' => ['name'],
};

 # Returns list of strings.
sub criticize {
    my ($obj, $schema, $path) = @_;
    @_ < 1 and croak arity_miss 0+@_, 1;
    @_ < 2 and $schema = $top_schema;
    @_ < 3 and $path = 'TOP' if @_ < 3;
    @_ > 3 and croak arity_miss 0+@_, 3;
    if (!defined $schema) {
        return ();  # Anything goes
    }
    elsif (ref $schema eq 'HASH') {
        ref $obj eq 'HASH' or return "Value at $path is not an object";
        my @errs;
        for (@{$schema->{'!REQUIRED'}}) {
            if (!exists $obj->{$_}) {
                push @errs, "Missing required property $_ at $path";
            }
        }
        for (keys %$obj) {
            if ($_ =~ /^!/) {
                push @errs, "Key $_ at $path should not begin with a !";
            }
            elsif (exists $schema->{$_}) {
                push @errs, criticize($obj->{$_}, $schema->{$_}, "$path.$_");
            }
            elsif (exists $schema->{'!ANY'}) {
                push @errs, criticize($obj->{$_}, $schema->{'!ANY'}, "$path.$_");
            }
            else {
                push @errs, "Unallowed property $_ at $path";
            }
        }
        return @errs;
    }
    elsif (ref $schema eq 'ARRAY') {
        ref $obj eq 'ARRAY' or return "Value at $path is not an array";
        @$schema == 1 or return "Schema itself is broken at $path";
        my @errs;
        for (0..$#$obj) {
            push @errs, criticize($obj->[$_], $schema->[0], "$path\[$_]");
        }
        return @errs;
    }
    elsif ($schema eq 'name') {
        ref $obj eq '' or return "Value at $path is not a string, let alone a name";
        my @errs;
        if ($obj eq '') {
            push @errs, "Value at $path is too empty to be a name";
        }
        if (length $obj > 200) {
            push @errs, "Value at $path is too long in bytes to be a name (".length($obj)." > 200)";
        }
        if ($obj =~ /^\s/) {
            push @errs, "Value at $path has leading whitespace, and so cannot be a name";
        }
        if ($obj =~ /\s$/) {
            push @errs, "Value at $path has trailing whitespace, and so cannot be a name";
        }
        if ($obj =~ /[\x00-\x1f\x7f]/) {
            push @errs, "Value at $path contains unprintable characters not allowed in a name";
        }
        return @errs;
    }
    elsif ($schema eq 'datetime') {
        ref $obj eq '' or return "Value at $path is not a string, let alone a date";
         # Only taking UTC dates
        $obj =~ /^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$/
            or return "Value at $path does not look like a date";
        return ();
    }
    elsif ($schema eq 'uri') {
        ref $obj eq '' or return "Value at $path is not a string, let along a uri";
        $obj =~ /^[a-z]+:\/\// or return "Value at $path does not look like a uri";
        return ();
    }
    elsif ($schema eq 'string') {
        ref $obj eq '' or return "Value at $path is not a string";
         # Not caring about numbers
        return ();
    }
    else {
        return "Schema itself is broken at $path";
    }
}
sub criticize_or_die {
    my ($obj, $mess) = @_;
    @_ == 2 or croak arity_miss 0+@_, 2;
    my @errs = ref $obj eq 'ARRAY' ? criticize(@$obj) : criticize($obj);
    if (@errs) {
        die join("\n    ", $mess, @errs) . "\n";
    }
}

##### Backend

my %items;  # cache
my %to_write;  # { encoded name => file contents or undef to delete }
my $in_transaction = 0;

sub transaction {
    my ($proc) = @_;
    if (!$in_transaction) {
         # Generate necessary structure
        mkdirs $datadir, "$datadir/things", "$datadir/backup";
        $in_transaction = 1;
        open my $LOCK, '>', "$datadir/lock";
        flock $LOCK, 2 or croak "Failed to acquire lock: $!\n";
        if (-e "$datadir/processing") {
            die "Sorry, something has gone wrong with the database and it needs manual maintanence.\n"
        }

        my @r = $proc->();

         # Finish, and be super paranoid about anything going wrong
         # First, back up affected files
        for (keys %to_write) {
            my $fn = "$datadir/things/$_.json";
            if (-e $fn) {
                require File::Copy;
                File::Copy::copy($fn, "$datadir/backup/$_.json")
                    or die "Failed to backup $fn: $!\n";
            }
        }
         # Record what we've touched
        my @wrote;
        open my $PR, '>', "$datadir/processing" or die "Failed to open $datadir/processing for writing: $!\n";
         # Do the writing.  This is where we get nervous.
        eval {
            for (keys %to_write) {
                my $fn = "$datadir/things/$_.json";
                if (defined $to_write{$_}) {
                    print $PR "$_\n" or die "Failed to write to $datadir/processing: $!\n";
                    open my $F, '>', $fn or die "Failed to open $fn for writing: $!\n";
                    push @wrote, $_;
                    print $F $to_write{$_} or die "Failed to write to $fn: $!\n";
                    close $F or die "Failed to close $fn: $!\n";
                }
                else {
                    print $PR "$_\n" or die "Failed to write to $datadir/processing: $!\n";
                    unlink $fn or die "Failed to delete $fn: $!\n";
                    push @wrote, $_;
                }
            }
        };
        my $mess;
        close $PR or $mess .= "Failed to close $datadir/processing: $!\n";
         # Restore from backup if something went wrong but we've written some files already.
        if ($@) {
            $mess .= $@;
            my @failed_restore;
            for (@wrote) {
                if (-e "$datadir/backup/$_.json") {
                    require File::Copy;
                    File::Copy::copy("$datadir/backup/$_.json", "$datadir/backup/$_.json")
                        or push @failed_restore, $_;
                }
                else {
                     # A little too paranoid to up and delete the file, so we'll just give up here
                    push @failed_restore, $_;
                }
            }
            if (@failed_restore) {
                $mess .= "Failed to restore some backed up files!  This is really strange.  You'd better check things out yourself.\n";
            }
            unlink "$datadir/processing" or $mess .= "Failed to delete $datadir/processing: $!\n";
            die $mess;
        }
        unlink "$datadir/processing" or die "Failed to delete $datadir/processing: $!\n";
        flock $LOCK, 8 or die "Failed to release lock: $!\n";
        close $LOCK or die "Failed to close lock: $!\n";
        unlink "$datadir/lock";  # Finally, a call where we don't really care if it fails
        %items = ();
        %to_write = ();
        $in_transaction = 0;
        if (@r == 1) {
            return $r[0];
        }
        else {
            return @r;
        }
    }
    else {
        goto &$proc;
    }
};

sub have_item {
    my ($name) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    return transaction sub {
        exists $items{$name} || -e name_file $name;
    };
}

sub read_item {
    my ($name) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    my $filename = name_file $name;
    exists $items{$name} and return $items{$name};
    criticize_or_die [$name, 'name', '(name given to read_item)'], 'Name given to read_item is invalid.';
    return transaction sub {
        -e $filename or croak "$name is not a registered item";
        my $json = slurp $filename;
        my $item = decode_json $json;
        criticize_or_die $item, "$filename contains invalid data:";
        return $items{$name} = $item;
    };
}

sub write_item {  # TODO: update links, dates
    my ($item) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    criticize_or_die $item, "Provided data did not pass validation:";
    my $json = encode_json $item;
    return transaction sub {
        $to_write{encode_name($item->{name})} = $json;
        $items{$item->{name}} = $item;
        return 1;
    };
}

sub delete_item {  # TODO: update links
    my ($name) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    return transaction sub {
        $to_write{encode_name($name)} = undef;
        return 1;
    };
}

sub update_item {  # TODO: update links, name
    my ($name, $proc) = @_;
    @_ == 2 or croak arity_miss 0+@_, 1;
    criticize_or_die [$name, 'name', '(name given to update_item)'], 'Name given to update_item is invalid.';
    ref $proc eq 'CODE' or croak "Second parameter given to update_item is not a CODE ref.";
    return transaction sub {
        my $item = $proc->(read_item $name);
        criticize_or_die $item, "Item returned from procedure given to update_item did not pass validation:";
        $item->{name} eq $name or croak "Procedure given to update_item changed the item's name (this is NYI).";
        write_item $item;
    };
    return 1;
}

sub all_names {
    @_ == 0 or croak arity_miss 0+@_, 0;
    my $dir = "$datadir/things";
    return transaction sub {
        opendir my $D, $dir or croak "Could not open $dir: $!\n";
        my @filenames = map {
            /^(.*)\.json$/ ? $1 : ();
        } readdir $D;
        closedir $D or croak "Could not close $dir: $!\n";
        return map decode_name($_), @filenames;
    };
}
sub all_items {
    @_ == 0 or croak arity_miss 0+@_, 0;
    my $copy = !$in_transaction;
    return transaction sub {
        for (all_names) {
            read_item($_);
        }
        return $copy ? {%items} : \%items;  # Please don't modify
    };
}

sub validate_everything {
    @_ == 0 or croak arity_miss 0+@_, 0;
    return transaction sub {
        all_items;
        my @errs;
        for (keys %items) {
            $items{$_}{name} eq $_ or push @errs, "Name property of $_ doesn't match its name.";
            my @es = criticize $items{$_};
            if (@es) {
                push @errs, "Invalid data in $_:";
                push @errs, map "    $_", @es;
            }
             # TODO: validate links
        }
        return @errs;
    };
}


##### Raw JSON API

sub raw_add {
    my ($text) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    my $item = decode_json $text;
    return transaction sub {
        have_item $item->{name} and croak "An item named $item->{name} is already registered";
        criticize_or_die $item, "Input to 'add' didn't pass validation.";
        my $filename = name_file $item->{name};
        write_item $item;
        return 1;
    };
}
sub raw_show {
    my ($name) = @_;
    @_ == 1 or croak arity_miss 0+@_, 1;
    my $item = read_item $name;
    return encode_json $item;
}

1;
